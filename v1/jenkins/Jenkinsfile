pipeline {

  environment {
      CONTEXT = "ALL"
      // valeurs possibles : BACK, FRONT, ALL
  }

  agent {
      docker {
          image 'maven:3.8.3-openjdk-17-slim'
      }
  }
  
  stages {

    stage('environment_setup') {
      steps {
        updateGitlabCommitStatus name: "${STAGE_NAME}", state: "running"

        sh "apt-get update"
        sh "apt-get install -y git ca-certificates gnupg curl wget unzip"
        sh "mkdir -p /etc/apt/keyrings"

        sh "curl -fsSL https://deb.nodesource.com/gpgkey/nodesource-repo.gpg.key | gpg --dearmor -o /etc/apt/keyrings/nodesource.gpg"
        sh 'echo "deb [signed-by=/etc/apt/keyrings/nodesource.gpg] https://deb.nodesource.com/node_18.x nodistro main" > /etc/apt/sources.list.d/nodesource.list'
        sh "apt-get update"
        sh "apt-get install -y nodejs"

        sh "wget ${SONAR_SCANNER_DOWNLOAD_BASE_URL}/sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip"
        sh "unzip sonar-scanner-cli-${SONAR_SCANNER_VERSION}.zip"
        sh "mv sonar-scanner-${SONAR_SCANNER_VERSION}/ sonar-scanner/"

	dir("${WORKSPACE}/back/java/") {
          sh "mvn install:install-file -Dfile=libs/parcoursup-algos-2023-4.jar -DpomFile=libs/parcoursup-algos-2023-4.pom"

          sh "mvn install:install-file -Dfile=libs/parcoursup-carte-2023-3-orientation.jar -DpomFile=libs/parcoursup-carte-2023-3-orientation.pom"
	}

      }
      post {
        success {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'failed'
        }
        aborted {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'canceled'
        }
      }
    }

    stage('processing_info') {
      steps {
        sh "echo \"Processing code from branch ${GIT_BRANCH}\""
        sh "echo \"Commit : ${GIT_COMMIT}\""
        sh "echo \"CONTEXT : ${CONTEXT}\""
	sh "echo \"HOME: ${HOME}\""
	sh "echo \"WORKSPACE: ${WORKSPACE}\""	
      }
    }

    stage('generate_data') {
      steps {
         sh "mkdir ${WORKSPACE}/back/java/tmp"
      	 dir("${WORKSPACE}/back/java/tmp/") {
	 
	   sh "mvn compile exec:java -f../pom.xml -Dexec.mainClass=fr.gouv.monprojetsup.data.update.UpdateMonProjetSupData"

        }
      }
    }

    stage('test') {
     parallel {
      
    stage('back_test_n_report') {
      when {
        expression {
            return env.CONTEXT == "ALL" || env.CONTEXT == "BACK";
        }
      }
      steps {
      updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'running'
        dir("${WORKSPACE}/back/java/") {

	  sh "mvn install:install-file -Dfile=libs/parcoursup-algos-2023-4.jar -DpomFile=libs/parcoursup-algos-2023-4.pom"

	  sh "mvn install:install-file -Dfile=libs/parcoursup-carte-2023-3-orientation.jar -DpomFile=libs/parcoursup-carte-2023-3-orientation.pom"
	  
          sh "mvn -B -DskipTests clean package"

          sh "mvn test"

          sh "mvn site -DgenerateReports=false"
    
          sh "mkdir -p ${WORKSPACE}/reports/java-app-surefire/"
          sh "mv target/site/surefire-report.html ${WORKSPACE}/reports/java-app-surefire/"
          sh "mv target/site/css/ ${WORKSPACE}/reports/java-app-surefire/"
          sh "mv target/site/images/ ${WORKSPACE}/reports/java-app-surefire/"

          sh "mv target/site/jacoco/ ${WORKSPACE}/reports/java-app-jacoco/"
          sh "mkdir -p ${WORKSPACE}/reports/java-app-sonar/"

          sh "${WORKSPACE}/sonar-scanner/bin/sonar-scanner \
                -Dsonar.sources=./ \
                -Dsonar.coverage.jacoco.xmlReportPaths=${WORKSPACE}/reports/java-app-jacoco/jacoco.xml \
                -Dsonar.projectKey=\"java-app-eval-$GIT_COMMIT\" \
                -Dsonar.projectName=\"java-app-eval-$GIT_COMMIT\" \
                -Dsonar.host.url=${SONAR_SERVER_URL} \
                -Dsonar.login=${SONAR_TOKEN} 2>&1 | tee java-app-sonar-scanner.log"

          sh "echo \"<html><body>Voir : <a href='${SONAR_SERVER_URL}/dashboard?id=java-app-eval-${GIT_COMMIT}' target='_blank'>${SONAR_SERVER_URL}/dashboard?id=java-app-eval-${GIT_COMMIT}</a></body></html>\" > ${WORKSPACE}/reports/java-app-sonar/index.html"
        }
      }
      post {
        success {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'failed'
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
              to: "${GIT_AUTHOR_EMAIL}", 
              subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        aborted {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'canceled'
        }
        always {
          archiveArtifacts artifacts: "reports/**/*", fingerprint: true

          publishHTML(
              [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
              reportDir: "${WORKSPACE}/reports/java-app-surefire/", reportFiles: 'surefire-report.html', reportName: 'Java app - Surefire Report',
              reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
              )
          publishHTML(
              [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
              reportDir: "${WORKSPACE}/reports/java-app-jacoco/", reportFiles: 'index.html', reportName: 'Java app - Jacoco Report',
              reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
              )
          publishHTML(
              [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
              reportDir: "${WORKSPACE}/reports/java-app-sonar/", reportFiles: 'index.html', reportName: 'Java app - Sonar report',
              reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
              )
        }
      }
    }

    stage('front_test_n_report') {
      when {
        expression {
            return env.CONTEXT == "ALL" || env.CONTEXT == "FRONT";
        }
      }
      steps {
      updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'running'
        dir("${WORKSPACE}/front/") {

          sh "npm ci"

          sh "npm run test:ci"

          sh "mkdir -p ${WORKSPACE}/reports/"

          sh "mkdir -p ${WORKSPACE}/reports/js-app-jest/"
          sh "mv test-report.html ${WORKSPACE}/reports/js-app-jest/index.html"

          sh "mv coverage/lcov-report/ ${WORKSPACE}/reports/js-app-lcov/"

          sh "mv coverage/lcov.info ${WORKSPACE}/reports/js-app-lcov/"

          sh "${WORKSPACE}/sonar-scanner/bin/sonar-scanner \
                -Dsonar.sources=./ \
                -Dsonar.javascript.lcov.reportPaths=${WORKSPACE}/reports/js-app-lcov/lcov.info \
                -Dsonar.projectKey=\"js-app-eval-${GIT_COMMIT}\" \
                -Dsonar.projectName=\"js-app-eval-${GIT_COMMIT}\" \
                -Dsonar.host.url=${SONAR_SERVER_URL} \
                -Dsonar.login=${SONAR_TOKEN} 2>&1 | tee js-app-sonar-scanner.log"

          sh "mkdir -p ${WORKSPACE}/reports/js-app-sonar/"
          sh "echo \"<html><body>Voir : <a href='${SONAR_SERVER_URL}/dashboard?id=js-app-eval-${GIT_COMMIT}' target='_blank'>${SONAR_SERVER_URL}/dashboard?id=js-app-eval-${GIT_COMMIT}</a></body></html>\" > ${WORKSPACE}/reports/js-app-sonar/index.html"
        }
      }
      post {
        success {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'success'
        }
        failure {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'failed'
            emailext body: 'Check console output at $BUILD_URL to view the results. \n\n ${CHANGES} \n\n -------------------------------------------------- \n${BUILD_LOG, maxLines=100, escapeHtml=false}', 
              to: "${GIT_AUTHOR_EMAIL}", 
              subject: 'Build failed in Jenkins: $PROJECT_NAME - #$BUILD_NUMBER'
        }
        aborted {
            updateGitlabCommitStatus name: "${STAGE_NAME}", state: 'canceled'
        }
        always {
          archiveArtifacts artifacts: "reports/**/*", fingerprint: true

            publishHTML(
                [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                reportDir: "${WORKSPACE}/reports/js-app-jest/", reportFiles: 'index.html', reportName: 'Js app - Jest Report',
                reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
                )

            publishHTML(
                [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                reportDir: "${WORKSPACE}/reports/js-app-lcov/", reportFiles: 'index.html', reportName: 'Js app - Lcov Report',
                reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
                )

            publishHTML(
                [allowMissing: false, alwaysLinkToLastBuild: false, keepAll: true,
                reportDir: "${WORKSPACE}/reports/js-app-sonar/", reportFiles: 'index.html', reportName: 'Js app - Sonar Report',
                reportTitles: '', useWrapperFileDirectly: true, allowMissing: true]
                )
        }
      }
      }
    }
  }
}
}