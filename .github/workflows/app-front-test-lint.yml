name: App Frontend - Tests and Linters

on:
  push:
    branches:
      - prod
      - demo
  pull_request:

env:
  WORKING_DIRECTORY: ./app/front

jobs:
  install:
    name: Install packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node and packages
        uses: ./.github/actions/setupNodeAndPackages

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: Install npm packages
        continue-on-error: true
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm ci

  test:
    name: Run tests
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node and packages
        uses: ./.github/actions/setupNodeAndPackages

      - name: Run test command
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run test

  lint:
    name: Run linters for code
    needs: install
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node and packages
        uses: ./.github/actions/setupNodeAndPackages

      - name: Run lint command
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run lint
  
  playwright:
    name: Run Playwright tests
    needs: [test, lint]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node and packages
        uses: ./.github/actions/setupNodeAndPackages

      - name: Install Playwright
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx playwright install --with-deps chromium

      - name: Copy .env
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: cp .env.ci .env

      - name: Run Playwright tests
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npx playwright test
  
  deploy:
    name: Deploy app
    needs: [playwright]
    if: ${{ github.event_name == 'push' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node and packages
        uses: ./.github/actions/setupNodeAndPackages
        
      - name: Copy .env
        run: echo "${{ github.ref_name == 'prod' && vars.PROD_FRONT_ENV_FILE || vars.DEMO_FRONT_ENV_FILE }}" > ${{ env.WORKING_DIRECTORY }}/.env

      - name: Build app
        working-directory: ${{ env.WORKING_DIRECTORY }}
        run: npm run build

      - name: Deploy to Server
        uses: easingthemes/ssh-deploy@main
        with:
          SSH_PRIVATE_KEY: ${{ secrets.FRONT_DEPLOY_SSH_KEY }}
          ARGS: "-rlgoDzvc -i --delete"
          SOURCE: "${{ env.WORKING_DIRECTORY }}/dist/"
          REMOTE_HOST: ${{ vars.FRONT_DEPLOY_HOSTNAME }}
          REMOTE_USER: ${{ vars.FRONT_DEPLOY_USERNAME }}
          TARGET: ${{ github.ref_name == 'prod' && vars.PROD_FRONT_DEPLOY_TARGET || vars.DEMO_FRONT_DEPLOY_TARGET }}
          EXCLUDE: "/dist/, /node_modules/"