/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/v1/formations/{idformation}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["postFormation"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/formations/suggestions": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["postSuggestions"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/formations/recherche": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["postRecherche"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/v1/formations/favoris": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["postFavoris"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    ProfilDTO: {
      /**
       * @description Id de l'élève
       * @example adcf627c-36dd-4df5-897b-159443a6d49c
       */
      id: string;
      /**
       * @description Etat d'avancée du projet de l'élève
       * @example aucune_idee
       * @enum {string}
       */
      situation?: "aucune_idee" | "quelques_pistes" | "projet_precis";
      /**
       * @description Classe actuelle
       * @example terminale
       * @enum {string}
       */
      classe?: "seconde" | "seconde_sthr" | "seconde_tmd" | "premiere" | "terminale";
      /**
       * @description Type de Bac choisi ou envisagé
       * @example Générale
       * @enum {string}
       */
      bac?: "NC" | "Générale" | "P" | "PA" | "S2TMD" | "ST2S" | "STAV" | "STD2A" | "STHR" | "STI2D" | "STL" | "STMG";
      /**
       * @description Enseignements de spécialité de terminale choisis ou envisagés
       * @example [
       *       "1056",
       *       "1054"
       *     ]
       */
      specialites?: string[];
      /**
       * @description Domaines d'activité
       * @example [
       *       "T_ITM_1054",
       *       "T_ITM_1534",
       *       "T_ITM_1248",
       *       "T_ITM_1351"
       *     ]
       */
      domaines?: string[];
      /**
       * @description Centres d'intérêt
       * @example [
       *       "T_ROME_2092381917",
       *       "T_IDEO2_4812"
       *     ]
       */
      centresInterets?: string[];
      /**
       * @description L'état de situation des idées de métiers de l'élève
       * @example quelques_pistes
       * @enum {string}
       */
      situationMetiers?: "aucune_idee" | "quelques_pistes";
      /**
       * @description Les idées de métiers de l'élève
       * @example [
       *       "MET_123",
       *       "MET_456"
       *     ]
       */
      metiers?: string[];
      /**
       * @description Durée envisagée des études
       * @example options_ouvertes
       * @enum {string}
       */
      dureeEtudesPrevue?: "options_ouvertes" | "courte" | "longue" | "aucune_idee";
      /**
       * @description Intérêt pour les formations en apprentissage
       * @example pas_interesse
       * @enum {string}
       */
      alternance?: "pas_interesse" | "indifferent" | "interesse" | "tres_interesse";
      /**
       * @description L'état de situation des idées de villes de l'élève
       * @example quelques_pistes
       * @enum {string}
       */
      situationVilles?: "aucune_idee" | "quelques_pistes";
      /**
       * @description Villes préférées pour étudier
       */
      villes?: Array<components["schemas"]["VilleDTO"]>;
      /**
       * Format: float
       * @description Moyenne générale scolaire estimée en terminale
       * @example 14
       */
      moyenneGenerale?: number;
      /**
       * @description L'état de situation des idées de formations de l'élève
       * @example quelques_pistes
       * @enum {string}
       */
      situationFormations?: "aucune_idee" | "quelques_pistes";
      /**
       * @description Les idées de formations de l'élève
       * @example [
       *       "fl1234",
       *       "fl5678"
       *     ]
       */
      formations?: string[];
    };
    ProfilOptionnelRequeteDTO: {
      profil?: components["schemas"]["ProfilDTO"];
    };
    VilleDTO: {
      /**
       * @description Code Insee de la ville
       * @example 75015
       */
      codeInsee: string;
      /**
       * @description Dénomination de la ville
       * @example Paris
       */
      nom: string;
      /**
       * Format: float
       * @description Latitude de la ville
       * @example 2.2885659
       */
      latitude: number;
      /**
       * Format: float
       * @description Longitude de la ville
       * @example 48.8512252
       */
      longitude: number;
    };
    AffiniteSpecialiteDTO: {
      nomSpecialite: string;
      /**
       * Format: int32
       */
      pourcentage: number;
    };
    AutoEvaluationMoyenneDTO: {
      /**
       * Format: float
       */
      moyenne: number;
      /**
       * Format: float
       */
      basIntervalleNotes: number;
      /**
       * Format: float
       */
      hautIntervalleNotes: number;
      baccalaureatUtilise: components["schemas"]["BaccalaureatDTO"];
    };
    BaccalaureatDTO: {
      id: string;
      nom: string;
    };
    CentileDTO: {
      /**
       * Format: int32
       */
      centile: number;
      /**
       * Format: float
       */
      note: number;
    };
    CriteresAnalyseCandidatureDTO: {
      nom: string;
      /**
       * Format: int32
       */
      pourcentage: number;
    };
    DomaineDTO: {
      id: string;
      nom: string;
    };
    ExplicationGeographiqueDTO: {
      nomVille: string;
      /**
       * Format: int32
       */
      distanceKm: number;
    };
    ExplicationsDTO: {
      geographique: Array<components["schemas"]["ExplicationGeographiqueDTO"]>;
      formationsSimilaires: Array<components["schemas"]["FormationSimilaireDTO"]>;
      dureeEtudesPrevue?: string;
      alternance?: string;
      interetsEtDomainesChoisis?: components["schemas"]["InteretsEtDomainesDTO"];
      specialitesChoisies: Array<components["schemas"]["AffiniteSpecialiteDTO"]>;
      typeBaccalaureat?: components["schemas"]["TypeBaccalaureatDTO"];
      autoEvaluationMoyenne?: components["schemas"]["AutoEvaluationMoyenneDTO"];
    };
    FicheFormationDTO: {
      id: string;
      nom: string;
      idsFormationsAssociees: string[];
      descriptifFormation?: string;
      descriptifDiplome?: string;
      descriptifConseils?: string;
      descriptifAttendus?: string;
      moyenneGeneraleDesAdmis?: components["schemas"]["MoyenneGeneraleDesAdmisDTO"];
      criteresAnalyseCandidature: Array<components["schemas"]["CriteresAnalyseCandidatureDTO"]>;
      repartitionAdmisAnneePrecedente?: components["schemas"]["RepartitionAdmisAnneePrecedenteDTO"];
      liens: Array<components["schemas"]["LiensDTO"]>;
      villes: string[];
      metiers: Array<components["schemas"]["MetierDetailleDTO"]>;
      /**
       * Format: int32
       */
      tauxAffinite?: number;
    };
    FormationAvecExplicationsDTO: {
      formation: components["schemas"]["FicheFormationDTO"];
      explications?: components["schemas"]["ExplicationsDTO"];
    };
    FormationSimilaireDTO: {
      id: string;
      nom: string;
    };
    InteretDTO: {
      id: string;
      nom: string;
    };
    InteretsEtDomainesDTO: {
      interets: Array<components["schemas"]["InteretDTO"]>;
      domaines: Array<components["schemas"]["DomaineDTO"]>;
    };
    LiensDTO: {
      nom: string;
      url: string;
    };
    MetierDetailleDTO: {
      id: string;
      nom: string;
      descriptif?: string;
      liens: Array<components["schemas"]["LiensDTO"]>;
    };
    MoyenneGeneraleDesAdmisDTO: {
      baccalaureat?: components["schemas"]["BaccalaureatDTO"];
      centiles: Array<components["schemas"]["CentileDTO"]>;
    };
    RepartitionAdmisAnneePrecedenteDTO: {
      /**
       * Format: int32
       */
      total: number;
      parBaccalaureat: Array<components["schemas"]["TotalAdmisPourUnBaccalaureatDTO"]>;
    };
    TotalAdmisPourUnBaccalaureatDTO: {
      baccalaureat: components["schemas"]["BaccalaureatDTO"];
      /**
       * Format: int32
       */
      nombreAdmis: number;
    };
    TypeBaccalaureatDTO: {
      baccalaureat: components["schemas"]["BaccalaureatDTO"];
      /**
       * Format: int32
       */
      pourcentage: number;
    };
    ProfilObligatoireRequeteDTO: {
      profil: components["schemas"]["ProfilDTO"];
    };
    FormationDTO: {
      id: string;
      nom: string;
      villes: string[];
      metiers: string[];
      /**
       * Format: float
       */
      tauxAffinite: number;
    };
    FormationsCourtesReponseDTO: {
      formations: Array<components["schemas"]["FormationDTO"]>;
    };
    FormationsAvecExplicationsDTO: {
      formations: Array<components["schemas"]["FormationAvecExplicationsDTO"]>;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  postFormation: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        idformation: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfilOptionnelRequeteDTO"];
      };
    };
    responses: {
      /**
       * @description OK
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["FormationAvecExplicationsDTO"];
        };
      };
    };
  };
  postSuggestions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfilObligatoireRequeteDTO"];
      };
    };
    responses: {
      /**
       * @description OK
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["FormationsCourtesReponseDTO"];
        };
      };
    };
  };
  postRecherche: {
    parameters: {
      query: {
        recherche: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfilOptionnelRequeteDTO"];
      };
    };
    responses: {
      /**
       * @description OK
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["FormationsAvecExplicationsDTO"];
        };
      };
    };
  };
  postFavoris: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ProfilObligatoireRequeteDTO"];
      };
    };
    responses: {
      /**
       * @description OK
       */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "*/*": components["schemas"]["FormationsAvecExplicationsDTO"];
        };
      };
    };
  };
}
